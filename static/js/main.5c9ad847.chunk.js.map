{"version":3,"sources":["App/index.js","serviceWorker.js","index.js"],"names":["_second","_minute","_hour","_day","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getMissingTime","now","delta","Date","days","Math","floor","hours","minutes","seconds","updateCountdown","setState","countdownData","imWaitingForDrinking","year","getFullYear","getMonth","getDate","state","isNewYear","newYear","countdownID","setInterval","clearInterval","_this$state","getCountdownMarkup","data","label","number","toString","length","concat","react_default","a","createElement","className","key","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,SAAU,KACVC,EAAoB,GAAVD,EACVE,EAAkB,GAAVD,EACRE,EAAe,GAARD,EA2GEE,cAxGb,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAuBFI,eAAiB,SAAAC,GACf,IACMC,EADW,IAAIC,KAAK,oBACDF,EAEzB,MAAO,CACLG,KAAMC,KAAKC,MAAMJ,EAAQX,GACzBgB,MAAOF,KAAKC,MAAOJ,EAAQX,EAAQD,GACnCkB,QAASH,KAAKC,MAAOJ,EAAQZ,EAASD,GACtCoB,QAASJ,KAAKC,MAAOJ,EAAQb,EAAWD,KAhC9BK,EAoCdiB,gBAAkB,WAChBjB,EAAKkB,SAAS,CACZC,cAAenB,EAAKO,eAAe,IAAIG,SAnCzC,IAAMF,EAAM,IAAIE,KACZU,GAAuB,EACvBC,EAAOb,EAAIc,cAAgB,EAC3BH,EAAgB,GANR,OAQW,IAAnBX,EAAIe,YAAsC,IAAlBf,EAAIgB,WAC9BJ,GAAuB,EACvBC,EAAOb,EAAIc,eAGXH,EAAgBnB,EAAKO,eAAeC,GAGtCR,EAAKyB,MAAQ,CACXC,WAAYN,EACZO,QAASN,EACTO,YAAa,KACbT,cAAeA,GApBLnB,mFA2CZG,KAAKe,SAAS,CACZU,YAAaC,YAAY1B,KAAKc,gBAAiB,sDAKjDa,cAAc3B,KAAKsB,MAAMG,8CAGlB,IAAAG,EACuC5B,KAAKsB,MAA3CC,EADDK,EACCL,UAAWC,EADZI,EACYJ,QAASR,EADrBY,EACqBZ,cAEtBa,EAAqB,SAACC,EAAMC,GAChC,GAAa,IAATD,EACF,OAAO,KAGT,IAAIE,EAASF,EAAKG,WAKlB,OAJID,EAAOE,OAAS,IAClBF,EAAM,IAAAG,OAAOH,IAIbI,EAAAC,EAAAC,cAAA,QAAMC,UAAS,kBAAAJ,OAAoBJ,GAASS,IAAKT,GAAjD,GAAAI,OACMH,EADN,KAAAG,OACgBJ,KAKpB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZhB,GACCa,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,cACaH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAmBf,GADhD,MAIFY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAInBhB,GACAa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,yBAAiBd,GACjBY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZV,EAAmBb,EAAa,KAAU,KAC1Ca,EAAmBb,EAAa,MAAW,KAC3Ca,EAAmBb,EAAa,QAAa,KAC7Ca,EAAmBb,EAAa,QAAa,eAhG1C0B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5c9ad847.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './index.scss';\n\nconst _second = 1000;\nconst _minute = _second * 60;\nconst _hour = _minute * 60;\nconst _day = _hour * 24;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    const now = new Date();\n    let imWaitingForDrinking = true; // of course default to true\n    let year = now.getFullYear() + 1;\n    let countdownData = {}\n\n    if (now.getMonth() === 0 && now.getDate() === 1) {\n      imWaitingForDrinking = false;\n      year = now.getFullYear();\n    }\n    else {\n      countdownData = this.getMissingTime(now);\n    }\n\n    this.state = {\n      isNewYear: !imWaitingForDrinking,\n      newYear: year,\n      countdownID: null,\n      countdownData: countdownData,\n    };\n  }\n\n  getMissingTime = now => {\n    const midnight = new Date('2019-01-01 00:00');\n    const delta = midnight - now;\n\n    return {\n      days: Math.floor(delta / _day),\n      hours: Math.floor((delta % _day) / _hour),\n      minutes: Math.floor((delta % _hour) / _minute),\n      seconds: Math.floor((delta % _minute) / _second),\n    }\n  }\n\n  updateCountdown = () => {\n    this.setState({\n      countdownData: this.getMissingTime(new Date())\n    })\n  }\n\n  componentDidMount() {\n    this.setState({\n      countdownID: setInterval(this.updateCountdown, 1000)\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.countdownID)\n  }\n\n  render() {\n    const { isNewYear, newYear, countdownData } = this.state\n\n    const getCountdownMarkup = (data, label) => {\n      if (data === 0) {\n        return null\n      }\n\n      let number = data.toString()\n      if (number.length < 2) {\n        number = `0${number}`\n      }\n\n      return (\n        <span className={`countdown-item ${label}`} key={label}>\n          {`${number} ${label}`}\n        </span>\n      )\n    }\n\n    return (\n      <div className=\"app-wrapper\">\n        {isNewYear && (\n          <React.Fragment>\n            <div className=\"text-wrapper im-drinking\">\n              <p>Happy New Year!</p>\n              <p className=\"welcome\">\n                Welcome to <span className=\"welcome-newyear\">{newYear}</span>! \n              </p>\n            </div>\n            <div className=\"pyro\">\n              <div className=\"before\"></div>\n              <div className=\"after\"></div>\n            </div>\n          </React.Fragment>\n        )}\n        {!isNewYear && (\n          <div className=\"text-wrapper\">\n            <p>Countdown to {newYear}</p>\n            <div className=\"countdown\">\n              {getCountdownMarkup(countdownData['days'], 's')}\n              {getCountdownMarkup(countdownData['hours'], 'h')}\n              {getCountdownMarkup(countdownData['minutes'], 'm')}\n              {getCountdownMarkup(countdownData['seconds'], 's')}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}